public interface IA
    {
        void show();
    }
public interface IB
{
  void show();    
}

public class student : IA,IB 
{
   public void IA.show()   // Error is : The modifier 'public' is not valid for this item.
        {
            Console.WriteLine("1");
        }
   public void IB.show()   // Error is : The modifier 'public' is not valid for this item.
        {
            Console.WriteLine("2");
        }
    }
    
  Solution: An explicit interface implementation doesn't have an access modifier since it isn't accessible as a member of the type it's defined in.
  
  class C : I1, I2
{
   ...
   void X() 
   {  
     M();             // error, which one? 
     ((I1)this).M();  // OK 
   }
}
 
 OR
 
 interface I1 { void M(); }
interface I2 { void M(); }

class C : I1, I2
{
    void I1.M() { ... }
    void I2.M() { ... }
}

C c = new C();
c.M();         // Error, otherwise: which one?
(c as I1).M(); // Ok, no ambiguity. 
  
    ----------------
    
    student s = new student();
        s.show();
    
